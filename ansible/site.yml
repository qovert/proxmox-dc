---
# Ansible Implementation - Complete VM provisioning + configuration
# Single-tool approach for Windows AD deployment on Proxmox

- name: Deploy Windows AD Infrastructure with Ansible
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    # Proxmox Configuration
    proxmox_host: "{{ proxmox_api_url | regex_replace('https://') | regex_replace(':8006/api2/json') }}"
    # Simplified variable reference - use vault variable directly
    proxmox_password: "{{ vault_proxmox_password }}"

    # VM Configuration
    domain_controllers:
      - name: "{{ dc_name_prefix }}-01"
        vmid: "{{ dc_vmid_start }}"
        ip: "{{ dc_ip_prefix }}.{{ dc_ip_start }}"
        primary: true
      - name: "{{ dc_name_prefix }}-02"
        vmid: "{{ dc_vmid_start + 1 }}"
        ip: "{{ dc_ip_prefix }}.{{ dc_ip_start + 1 }}"
        primary: false

  tasks:
    - name: Create and start Domain Controller VMs
      community.proxmox.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password }}"
        name: "{{ item.name }}"
        vmid: "{{ item.vmid }}"
        node: "{{ proxmox_node }}"
        clone: "{{ windows_template_name }}"
        full: true
        # VM Resources - only specify if overriding template values
        cores: "{{ dc_cpu_cores | default(omit) }}"
        sockets: "{{ dc_cpu_sockets | default(omit) }}"
        memory: "{{ dc_memory_mb | default(omit) }}"
        bios: "{{ dc_bios_type | default(omit) }}"
        machine: "{{ dc_machine_type | default(omit) }}"
        cpu: "{{ dc_cpu_type | default(omit) }}"
        boot: order=virtio0
        net:
          net0: "virtio,bridge={{ network_bridge }},ip={{ item.ip }}/{{ network_cidr_bits }},gw={{ gateway_ip }}"
        ciuser: "{{ admin_username }}"
        cipassword: "{{ admin_password }}"
        sshkeys: "{{ ssh_public_key }}"
        nameserver: "{{ dns_servers.split(' ') | join(' ') }}"
        state: started  # Create and start in one operation
        timeout: 900    # Increased timeout for combined operation
        validate_certs: false
      loop: "{{ domain_controllers }}"
      register: vm_creation
      tags: [provision]

    # Phase 2: Wait for VM availability and create dynamic inventory
    - name: Wait for VMs to be accessible via SSH
      ansible.builtin.wait_for:
        host: "{{ item.ip }}"
        port: 22
        delay: 30
        timeout: 600
        state: started
      loop: "{{ domain_controllers }}"
      tags: [provision]

    - name: Add Windows VMs to inventory
      ansible.builtin.add_host:
        name: "{{ item.name }}"
        groups:
          - domain_controllers
          - "{{ 'primary_dc' if item.primary else 'additional_dc' }}"
        ansible_host: "{{ item.ip }}"
        ansible_user: "{{ admin_username }}"
        ansible_password: "{{ admin_password }}"
        ansible_connection: ssh
        ansible_shell_type: powershell
        ansible_shell_executable: None
        is_primary_dc: "{{ item.primary }}"
        domain_name: "{{ domain_name }}"
        netbios_name: "{{ netbios_name }}"
        dsrm_password: "{{ dsrm_password }}"
        admin_username: "{{ admin_username }}"
        admin_password: "{{ admin_password }}"
        dns_forwarders: "{{ dns_forwarders }}"
        organizational_units: "{{ organizational_units }}"
        forest_functional_level: "{{ forest_functional_level }}"
        domain_functional_level: "{{ domain_functional_level }}"
        enable_recycle_bin: "{{ enable_recycle_bin }}"
      loop: "{{ domain_controllers }}"
      tags: [provision, configure]

# Common connection settings for all Windows plays
- name: Set common connection variables
  hosts: domain_controllers
  gather_facts: false
  vars:
    ansible_connection: ssh
    ansible_shell_type: powershell
    ansible_shell_executable: None
  tasks:
    - name: Test initial SSH connectivity
      ansible.builtin.wait_for_connection:
        timeout: 300
  tags: [configure]

# Phase 3: Windows Base Configuration
- name: Configure Windows Base System
  hosts: domain_controllers
  gather_facts: true  # Changed to true for efficiency and caching
  vars:
    ansible_connection: ssh
    ansible_shell_type: powershell
    ansible_shell_executable: None

  roles:
    - windows_base

  tags: [configure, windows_base]

# Phase 4: Active Directory Configuration (Primary first, then additional)
- name: Install Active Directory on Primary DC
  hosts: primary_dc
  gather_facts: false
  vars:
    ansible_connection: ssh
    ansible_shell_type: powershell
    ansible_shell_executable: None

  roles:
    - active_directory

  tags: [configure, active_directory, primary]

- name: Install Active Directory on Additional DCs
  hosts: additional_dc
  gather_facts: false
  vars:
    ansible_connection: ssh
    ansible_shell_type: powershell
    ansible_shell_executable: None

  roles:
    - active_directory

  tags: [configure, active_directory, additional]

# Phase 5: DNS and Monitoring (can run in parallel)
- name: Configure DNS Servers
  hosts: domain_controllers
  gather_facts: false
  vars:
    ansible_connection: ssh
    ansible_shell_type: powershell
    ansible_shell_executable: None

  roles:
    - dns_server

  tags: [configure, dns]

- name: Setup Monitoring and Health Checks
  hosts: domain_controllers
  gather_facts: false
  vars:
    ansible_connection: ssh
    ansible_shell_type: powershell
    ansible_shell_executable: None

  roles:
    - monitoring

  tags: [configure, monitoring]

# Phase 6: Post-Deployment Validation
- name: Validate Deployment
  hosts: domain_controllers
  gather_facts: false
  vars:
    ansible_connection: ssh
    ansible_shell_type: powershell
    ansible_shell_executable: None

  tasks:
    - name: Verify critical services are running
      ansible.windows.win_service:
        name: "{{ item }}"
      register: service_status
      loop:
        - NTDS
        - DNS
      failed_when: service_status.state != 'running'

    - name: Test AD connectivity and domain information
      ansible.windows.win_powershell:
        script: |
          try {
            $domain = Get-ADDomain -ErrorAction Stop
            Write-Output "SUCCESS: Domain $($domain.DNSRoot) is accessible"
            Write-Output "Domain Controllers: $($domain.ReplicaDirectoryServers -join ', ')"
            $true
          } catch {
            Write-Error "AD connectivity test failed: $_"
            $false
          }
      register: ad_test
      failed_when: not (ad_test.output | select(regex('SUCCESS:')) | length > 0)

    - name: Display deployment summary
      ansible.builtin.debug:
        msg: |
          âœ… Deployment Complete for {{ inventory_hostname }}:
          - NTDS Service: {{ service_status.results[0].state }}
          - DNS Service: {{ service_status.results[1].state }}
          - Domain: {{ domain_name }}
          - Role: {{ 'Primary DC' if is_primary_dc else 'Additional DC' }}
          - IP Address: {{ ansible_host }}
          - AD Test: {{ ad_test.output | select(regex('SUCCESS:')) | first | default('FAILED') }}

  tags: [validate]
